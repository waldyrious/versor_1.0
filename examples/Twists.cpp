//
//  Twists.cpp
//  Versor
//
//  Created by Pablo Colapinto on 12/3/12.
//  Copyright (c) 2012 __MyCompanyName__. All rights reserved.
//

#include "vsr.h"
#include "vsr_GLVInterfaceImpl.h"
#include "vsr_tests.h"

#include "vsr_motor.h"

#include <iostream>

using namespace vsr;

void twists(GLVApp& app){
    
    static double period, pitch;
    SET
        app.gui(period,"period",-10,10)(pitch,"pitch",-10,10);
    END 
    
    //A Space Frame
    static Frame frame;
    app.interface.touch(frame);
    
    //The Dual Line y axis of the space frame
    Dll dll = frame.dly();
    DRAW3(dll,1,0,0);
    
    //A Twist around and along that axis
    DualLine twist = Twist::Along( dll, period * PI, pitch * PI);
    
    //Another Space Frame at 1,0,0
    static Frame sframe( PT(1,0,0) );
    app.interface.touch(sframe);
    
    for (int i = 0; i < 1000; ++i){
        double t= 1.0 * i / 1000;
        
        Motor m = Gen::mot( twist * t );
        
        //A Space Frame built directly from the Motor generated by the twist, and
        //a start frame
        Frame nf( m * sframe.mot());
        DRAW(nf);
    
    }
}

void GLVApp :: onDraw() {
    twists(*this);
}

int main(int argc, const char * argv[]) {
     
    File::setdir( argv[0] );       
    /* Set Up GLV hierarchy */
	GLV glv(0,0);	
	glv.colors().back.set(.3,.3,.3);
    		
	Window * win = new Window(500,500,"KNOTS",&glv);
    GLVApp * app = new GLVApp(win);    
    
    glv << app;
        
    Application::run();

    return 0;
}